#!/bin/bash
function include_common(){ # includes common.inc.sh
  . "$HOME/bin/lib/common.inc.sh";
}
function errmsg_usage_exit(){
  export ERR_STATUS=$1;
  if [[ $ERR_STATUS -eq 0 ]]; then
    note_to_stdout "HELP" "\n%s\n" $2;
  else 
    err_to_stderr "$2" "${@:3:$MAXARGC}";
  fi;
  print_usage;
  exit ${ERR_STATUS};
}
function print_usage(){
  export SPACER=' ';
  export SEP='~';
  export MARGIN1='       ';
  export MARGIN2='         ';
  export RO_NAME="RO";
  export RO_LOGIC="R,B,D|M,X";
  declare -A RO_DESCR=( #RO
  ['R']="-R d1,d2..,dn"
  ['B']="-B"
  ['D']="-D k"
  ['M']="-M a,b,c"
  ['X']="-X"
  );
  declare -A ROF_DESCR=( #ROF
  ['R']="description of R and its params d1,d2..,dn"
  ['B']="description of B"
  ['D']="description of D and its param k"
  ['M']="description of M and its params a,b,c"
  ['X']="description of X"
  );
  export OO_NAME='OO';
  export OO_LOGIC='h,a|b';
  declare -A OO_DESCR=(
  ['h']="-h"
  ['a']="-a"
  ['b']="-b C"
  );
  declare -A OOF_DESCR=( #OO
  ['h']='prints this usage info'
  ['a']='full description of opt opt -a'
  ['b']='full description of opt opt -b and its param C'
  );
  declare -A RP_DESCR=(
  ['RP']='rp0 rp2 .. rpN'
  );
  declare -A RPF_DESCR=(
  ['RP']='full description of rpI, I(=[0,N]'
  );
  declare -A OP_DESCR=(
  ['OP']='op0 op1 ... opN'
  );
  declare -A OPF_DESCR=(
  ['OP']='full description of opI, I(=[0,N]'
  );
  export T_RO="[";
  export T_ROF="[";
  let NXOR=0;
  while read XOR_ROS; do
    let NOR=0;
    if [ $NXOR -gt 0 ]; then 
      export T_RO="${T_RO},";
      export T_ROF="${T_ROF},";
    fi;
    while read OR_RO; do
      if [ $NOR -gt 0 ]; then 
        export T_RO="${T_RO}|";
        export T_ROF="${T_ROF}|";
      fi;
      export T_RO="${T_RO}[${RO_DESCR[$OR_RO]}]";
      export T_ROF="${T_ROF}[%s]";
      let NOR++;
    done< <( echo $XOR_ROS | tr '|' '\n' )
    let NXOR++;
  done< <( echo $RO_LOGIC | tr ',' '\n' )
  export T_RO="${T_RO}]";
  export T_ROF="${T_ROF}]";
  export T_OO="(";
  export T_OOF="(";
  let NXOR=0;
  while read OOS_OR; do
    let NOR=0;
    if [ $NXOR -gt 0 ]; then 
      export T_OO="${T_OO},";
      export T_OOF="${T_OOF},";
    fi;
    while read OO_XORS; do
      if [ $NOR -gt 0 ]; then 
        export T_OO="${T_OO}|";
        export T_OOF="${T_OOF}|";
      fi;
      export T_OO="${T_OO}(${OO_DESCR[$OO_XORS]})";
      export T_OOF="${T_OOF}(%s)";
      let NOR++;
    done< <( echo $OOS_OR | tr '|' '\n' )
    let NXOR++;
  done< <( echo $OO_LOGIC | tr ',' '\n' )
  export T_OO="${T_OO})";
  export T_OOF="${T_OOF})";
  export T_O="${T_RO} ${T_OO}";
  export T_OF="${T_ROF} ${T_OOF}";
  export T_RP="";
  for RP in ${!RP_DESCR[*]}; do
    export T_RP="${T_RP} [$RP]";
    export T_RPF="${T_RPF} [${RP_DESCR[$RP]}]";
  done;
  for OP in ${!OP_DESCR[*]}; do
    export T_OP="${T_OP} ($OP)";
    export T_OPF="${T_OPF} (${OP_DESCR[$OP]})";
  done;
  export T_P="${T_RP}${T_OP}";
  export T_PF="${T_RPF}${T_OPF}";
  export T="%s [%s] (%s)${T_P}";
  export TF="%s ${T_O}${T_PF}\n";
  note_to_stdout 'USAGE' "%s\n" " ";
  printf "$T\n" "$SN" "${RO_NAME}" "${OO_NAME}";
  printf "$TF\n" "$SN" ;
  { # start printing full desriptions for opts and for params
    printf "${SEP}%s [%s]${SEP}:=${SEP}${T_RO}\n" "$MARGIN1" "${RO_NAME}"
    for ROF in ${!ROF_DESCR[*]}; do
      printf "${SEP}%s %s${SEP}:${SEP} %s\n" "$MARGIN2" "${RO_DESCR[$ROF]}" "${ROF_DESCR[$ROF]}";
    done; 
  } | column -t -s $SEP
  {
    printf "${SEP}%s [%s]${SEP}:=${SEP}${T_OO}\n" "$MARGIN1" "${OO_NAME}" 
    for OOF in ${!OOF_DESCR[*]}; do
      printf "${SEP}%s %s${SEP}:${SEP} %s\n" "$MARGIN2" "${OO_DESCR[$OOF]}" "${OOF_DESCR[$OOF]}";
    done;
  } | column -t -s $SEP
  {
    for RP in ${!RPF_DESCR[*]}; do
      printf  "${SEP}%s [%s]${SEP}:=${SEP}[%s]\n${SEP}%s %s${SEP}:${SEP}%s\n" "$MARGIN1" "$RP" "${RP_DESCR[$RP]}" "$MARGIN2" "${RP_DESCR[$RP]}" "${RPF_DESCR[$RP]}";
    done;                                                  
    for OP in ${!OPF_DESCR[*]}; do                         
      printf  "${SEP}%s [%s]${SEP}:=${SEP}[%s]\n${SEP}%s %s${SEP}:${SEP}%s\n" "$MARGIN1" "$OP" "${OP_DESCR[$OP]}" "$MARGIN2" "${OP_DESCR[$OP]}" "${OPF_DESCR[$OP]}";
    done;
  } | column -t -s $SEP
  printf "\n";
  note_to_stdout 'NOTE' "\n" " ";
  {
   printf "${SEP}%s${SEP}params in \"()\" are OPTIONAL\n${SEP}%s${SEP}params in \"[]\" are REQUIRED\n${SEP}%s${SEP}inside \"()\" and \"[]\", \"|\" means XOR${SEP}\n${SEP}%s${SEP}inside \"()\" and \"[]\", \",\" means inclusive OR\n" '-' '-' '-' '-';
  } | column -t -s $SEP;

}
function print_help(){
  export ES=255;
  if [[ $# -gt 0 ]]; then 
    errmsg_usage_exit "$ES" " Invalid invocation: %s\n" "$INVOKED_WITH";
  else 
    print_usage; 
  fi;
}
function getopts_handler(){ # todo: make it match things in usage
  start_xtrace
  while getopts "haR:b:" OPT; do
    case $OPT in
      R)  export REQ_FLAG=$OPT; export R=$OPTARG; ;; 
      b)  export B=$OPTARG; ;; 
      a)  export A=$OPT; ;;
      h)  export HELP_FLAG=$OPT; ;; #no args=>OPTIND--export OPTIND=$( echo "$OPTIND-1" | bc ); 
      :)  errmsg_usage_exit 1 " Missing arg:\noption -%s requires an argument.\n" $OPTARG; ;;
      \?) errmsg_usage_exit 2 " Invalid option:\n   -%s\n" $OPTARG; ;;
    esac
  done
  if [[ -z $REQ_FLAG ]]; then
    errmsg_usage_exit 3 " missing required option:\n  -%s must be provided!\n\n" "R"
  else
    export ROPT="-R $R";
  fi;
  if [[ $HELP_FLAG = "h" ]]; then
    errmsg_usage_exit 0 '';
  fi;
  if [[ -n $B ]] && [[ -z $A ]]; then
    export OOPT="-b ${B}";
  elif [[ -n $A ]] && [[ -z $B ]]; then
    export OOPT="-a";
  elif [[ -z $B ]] && [[ -z $A ]]; then
    export OOPT="";
  else
    errmsg_usage_exit 4 'ERR: options -a -b are exclusive';
  fi
  if [[ $OOPT == "-a" ]]; then
    export OPTIND=$( echo "$OPTIND-1" | bc );
  fi;
  stop_xtrace
}
function params_handler(){
  start_xtrace
  declare -a PARAMS=( ${@:$OPTIND:$MAXARGC} );
  export N=${#PARAMS[@]};
  export ERRM="NUMBER OF ARGUMENTS PROVIDED IS NOT IN REQUIRED RANGE:\n${N}!(=[$MINP,$MAXP]\n";
  if [ $N -lt $MINP ] || [ $N -gt $MAXP ]; then errmsg_usage_exit 5 "${ERRM}";
  fi;
  stop_xtrace
}
function shutil() {
  start_xtrace
  getopts_handler $*;
  params_handler $*;
  export BINARY="echo ";
  export CMD="${BINARY} ${ROPT} ${OOPT} ${PARAMS[*]}";
  padl "${CMD}"
  stop_xtrace
}
function __main__(){
  include_common;
  let DEBUG=0; #defaults
  start_xtrace;
  export MINP=1;
  export MAXP=1000;
  export SN=$( basename $0 );
  declare -a ORIG_ARGS=( ${@:0:$MAXARGC} );
  export INVOKED_WITH="${SN} ${ORIG_ARGS[*]}";
  shutil ${ORIG_ARGS[*]:1:$MAXARGC};
  stop_xtrace;
}
__main__ $*
